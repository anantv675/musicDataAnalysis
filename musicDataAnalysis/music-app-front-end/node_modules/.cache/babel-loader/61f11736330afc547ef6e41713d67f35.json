{"ast":null,"code":"var _jsxFileName = \"/home/anant/Documents/personal_git/musicDataAnalysis/musicDataAnalysis/music-app-front-end/src/components/ItemList.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport ItemService from '../services/ItemService';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction FetchData({\n  columns,\n  data\n}) {\n  _s();\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // Render the UI for your table\n\n  const [brand, setBrand] = useState('');\n  const inputRef = useRef();\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setBrand(inputRef.current.value);\n    ItemService.getAllItemsByBrand(inputRef.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Submit Value: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: brand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this); //\n  // function handleClickToFetchData(e) {\n  //     e.preventDefault();\n  // }\n  // const [brand, setBrand] = useState('');\n  // const inputRef = useRef();\n  //\n  //\n  //\n  // // let textInput = React.createRef();\n  // // let onOnclickHandler = (e) => {\n  // //     console.log(textInput.current.value);\n  // // };\n  //\n  // return (\n  //     <div>\n  //         {/*<input ref={textInput} type=\"text\" />*/}\n  //         {/*<button onClick={onOnclickHandler}>Click Here</button>*/}\n  //         <input type=\"text\" id=\"brand\" name=\"brand\" value={brand} onChange={event => setBrand(event.target.value)}/>\n  //         <button onClick={(e)=>handleClickToFetchData(e)}>Get data</button>\n  //     </div>\n  // );\n}\n\n_s(FetchData, \"zVGbOxs+Nqsi4bMOnSRz6K9NBbk=\", false, function () {\n  return [useTable];\n});\n\n_c = FetchData;\n;\nexport default FetchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchData\");","map":{"version":3,"sources":["/home/anant/Documents/personal_git/musicDataAnalysis/musicDataAnalysis/music-app-front-end/src/components/ItemList.js"],"names":["useRef","useState","ItemService","React","styled","useTable","Styles","div","FetchData","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","brand","setBrand","inputRef","submitHandler","e","preventDefault","current","value","getAllItemsByBrand","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport ItemService from '../services/ItemService'\nimport React from \"react\";\nimport styled from 'styled-components'\nimport { useTable } from 'react-table'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n\n    function FetchData({ columns, data }){\n\n        // Use the state and functions returned from useTable to build your UI\n        const {\n            getTableProps,\n            getTableBodyProps,\n            headerGroups,\n            rows,\n            prepareRow,\n        } = useTable({\n            columns,\n            data,\n        })\n\n        // Render the UI for your table\n\n        const [brand, setBrand] = useState('');\n        const inputRef = useRef();\n\n        const submitHandler = (e) => {\n            e.preventDefault();\n            setBrand(inputRef.current.value);\n            ItemService.getAllItemsByBrand(inputRef.current.value)\n        }\n\n        return (\n            <div className=\"App\">\n                <form onSubmit={submitHandler}>\n                    <input ref={inputRef} />\n                    <button type=\"submit\">Submit</button>\n                </form>\n\n                <p>Submit Value: <b>{brand}</b></p>\n\n                <table {...getTableProps()}>\n                    <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                            ))}\n                        </tr>\n                    ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n\n            </div>\n        );\n\n\n\n        //\n        // function handleClickToFetchData(e) {\n        //     e.preventDefault();\n        // }\n\n\n        // const [brand, setBrand] = useState('');\n        // const inputRef = useRef();\n        //\n\n        //\n        //\n        // // let textInput = React.createRef();\n        // // let onOnclickHandler = (e) => {\n        // //     console.log(textInput.current.value);\n        // // };\n        //\n        // return (\n        //     <div>\n        //         {/*<input ref={textInput} type=\"text\" />*/}\n        //         {/*<button onClick={onOnclickHandler}>Click Here</button>*/}\n        //         <input type=\"text\" id=\"brand\" name=\"brand\" value={brand} onChange={event => setBrand(event.target.value)}/>\n        //         <button onClick={(e)=>handleClickToFetchData(e)}>Get data</button>\n        //     </div>\n        // );\n    };\n\n\n    export default FetchData"]},"metadata":{},"sourceType":"module"}