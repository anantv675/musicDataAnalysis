{"ast":null,"code":"var _jsxFileName = \"/home/anant/Documents/personal_git/musicDataAnalysis/musicDataAnalysis/music-app-front-end/src/components/PopulateTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport matchSorter from 'match-sorter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`; // Define a default UI for filtering\n\n_c = Styles;\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s();\n\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Search:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `${count} records...`,\n      style: {\n        fontSize: '1.1rem',\n        border: '0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n} // Define a default UI for filtering\n\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c2 = GlobalFilter;\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c3 = DefaultColumnFilter;\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  _s2();\n\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), options.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option,\n      children: option\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c4 = SelectColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n}\n\nfuzzyTextFilterFn.autoRemove = val => !val;\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s3();\n\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render('Filter') : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: state.globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: firstPageRows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: JSON.stringify(state.filters, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(Table, \"RJfX5avMIR4ez+RuWlZOl1uAfAw=\", false, function () {\n  return [useTable];\n});\n\n_c5 = Table;\n\nfunction App() {\n  _s4();\n\n  const columns = React.useMemo(() => [// {\n  //     Header: 'Name',\n  //     columns: [\n  //         {\n  //             Header: 'First Name',\n  //             accessor: 'firstName',\n  //         },\n  //         {\n  //             Header: 'Last Name',\n  //             accessor: 'lastName',\n  //             // Use our custom `fuzzyText` filter on this column\n  //             filter: 'fuzzyText',\n  //         },\n  //     ],\n  // },\n  {\n    Header: 'Info',\n    columns: [{\n      Header: 'Age',\n      accessor: 'age',\n      Filter: SliderColumnFilter,\n      filter: 'equals'\n    }, {\n      Header: 'Visits',\n      accessor: 'visits',\n      Filter: NumberRangeColumnFilter,\n      filter: 'between'\n    }, {\n      Header: 'Status',\n      accessor: 'status',\n      Filter: SelectColumnFilter,\n      filter: 'includes'\n    }, {\n      Header: 'Profile Progress',\n      accessor: 'progress',\n      Filter: SliderColumnFilter,\n      filter: filterGreaterThan\n    }]\n  }], []);\n  const data = React.useMemo(() => makeData(100000), []);\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n}\n\n_s4(App, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c6 = App;\n\nfunction ItemTable(props) {\n  _s5();\n\n  const columns = React.useMemo(() => [{\n    Header: 'Item details',\n    columns: [{\n      Header: 'Date',\n      accessor: 'date'\n    }, {\n      Header: 'Title',\n      accessor: 'title'\n    }, {\n      Header: 'Main category',\n      accessor: 'main_cat'\n    }, {\n      Header: 'Brand',\n      accessor: 'brand'\n    }, {\n      Header: 'Item ID',\n      accessor: 'asin'\n    }]\n  }], []);\n  const data = React.useMemo(() => props.brandData, [props.brandData]);\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 11\n  }, this);\n}\n\n_s5(ItemTable, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c7 = ItemTable;\nexport default ItemTable;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"GlobalFilter\");\n$RefreshReg$(_c3, \"DefaultColumnFilter\");\n$RefreshReg$(_c4, \"SelectColumnFilter\");\n$RefreshReg$(_c5, \"Table\");\n$RefreshReg$(_c6, \"App\");\n$RefreshReg$(_c7, \"ItemTable\");","map":{"version":3,"sources":["/home/anant/Documents/personal_git/musicDataAnalysis/musicDataAnalysis/music-app-front-end/src/components/PopulateTable.js"],"names":["React","useState","useRef","styled","useTable","useFilters","useGlobalFilter","useAsyncDebounce","matchSorter","Styles","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","fuzzyTextFilterFn","rows","keys","autoRemove","val","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","getRowProps","cells","cell","getCellProps","JSON","stringify","filters","App","Header","accessor","SliderColumnFilter","NumberRangeColumnFilter","filterGreaterThan","makeData","ItemTable","props","brandData"],"mappings":"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","sourcesContent":["import React, {useState,useRef} from 'react'\nimport styled from 'styled-components'\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\nimport matchSorter from 'match-sorter'\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n                          preGlobalFilteredRows,\n                          globalFilter,\n                          setGlobalFilter,\n                      }) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n      Search:{' '}\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n                style={{\n                    fontSize: '1.1rem',\n                    border: '0',\n                }}\n            />\n    </span>\n    )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n                                 column: { filterValue, preFilteredRows, setFilter },\n                             }) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n                                column: { filterValue, setFilter, preFilteredRows, id },\n                            }) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\nfuzzyTextFilterFn.autoRemove = val => !val\n\n\nfunction Table({ columns, data }) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        []\n    );\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        visibleColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n        },\n        useFilters, // useFilters!\n        useGlobalFilter // useGlobalFilter!\n    );\n\n    // We don't want to render all of the rows for this example, so cap\n    // it for this use case\n    const firstPageRows = rows.slice(0, 10);\n\n    return (\n        <>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render('Header')}\n                                {/* Render the columns filter UI */}\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                <tr>\n                    <th\n                        colSpan={visibleColumns.length}\n                        style={{\n                            textAlign: 'left',\n                        }}\n                    >\n                        <GlobalFilter\n                            preGlobalFilteredRows={preGlobalFilteredRows}\n                            globalFilter={state.globalFilter}\n                            setGlobalFilter={setGlobalFilter}\n                        />\n                    </th>\n                </tr>\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {firstPageRows.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n            <br />\n            <div>Showing the first 20 results of {rows.length} rows</div>\n            <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n            </div>\n        </>\n    )\n}\n\nfunction App() {\n    const columns = React.useMemo(\n        () => [\n            // {\n            //     Header: 'Name',\n            //     columns: [\n            //         {\n            //             Header: 'First Name',\n            //             accessor: 'firstName',\n            //         },\n            //         {\n            //             Header: 'Last Name',\n            //             accessor: 'lastName',\n            //             // Use our custom `fuzzyText` filter on this column\n            //             filter: 'fuzzyText',\n            //         },\n            //     ],\n            // },\n            \n            {\n                Header: 'Info',\n                columns: [\n                    {\n                        Header: 'Age',\n                        accessor: 'age',\n                        Filter: SliderColumnFilter,\n                        filter: 'equals',\n                    },\n                    {\n                        Header: 'Visits',\n                        accessor: 'visits',\n                        Filter: NumberRangeColumnFilter,\n                        filter: 'between',\n                    },\n                    {\n                        Header: 'Status',\n                        accessor: 'status',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'Profile Progress',\n                        accessor: 'progress',\n                        Filter: SliderColumnFilter,\n                        filter: filterGreaterThan,\n                    },\n                ],\n            },\n        ],\n        []\n    )\n\n    const data = React.useMemo(() => makeData(100000), [])\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} />\n        </Styles>\n    )\n}\n\n\n    function ItemTable(props) {\n\n        const columns = React.useMemo(\n            () => [\n                {\n                    Header: 'Item details',\n                    columns: [\n                        {\n                            Header: 'Date',\n                            accessor: 'date',\n                        },\n                        {\n                            Header: 'Title',\n                            accessor: 'title',\n                        },\n                        {\n                            Header: 'Main category',\n                            accessor: 'main_cat',\n                        },\n                        {\n                            Header: 'Brand',\n                            accessor: 'brand',\n                        },\n                        {\n                            Header: 'Item ID',\n                            accessor: 'asin',\n                        }\n                    ],\n                }\n            ],\n            []\n        );\n\n        const data = React.useMemo(() => props.brandData, [props.brandData]);\n        return (\n          <Styles>\n            <Table columns={columns} data={data} />\n          </Styles>\n        )\n}\nexport default ItemTable\n"]},"metadata":{},"sourceType":"module"}